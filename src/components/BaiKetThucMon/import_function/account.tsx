import React, {useEffect, useState} from 'react';
import {
  View,
  Text,
  TextInput,
  Image,
  StyleSheet,
  TouchableOpacity,
  SafeAreaView,
  ScrollView,
  Platform,
} from 'react-native';
import {launchImageLibrary} from 'react-native-image-picker';
import {updateUser} from '../database';
import AsyncStorage from '@react-native-async-storage/async-storage';
import AutoDismissAlert from '../notification_function';

type AccountProps = {
  user: any;
  onUserUpdate: (user: any) => void;
};

const Account = ({user, onUserUpdate}: AccountProps) => {
  const [form, setForm] = useState({
    username: '',
    email: '',
    avatar: '',
    address: '',
    phome: '',
    oldPassword: '',
    newPassword: '',
  });

  useEffect(() => {
    if (user) {
      setForm({
        username: user.username || '',
        email: user.email || '',
        avatar: user.avatar || 'https://via.placeholder.com/120',
        address: user.address || '',
        phome: user.phome || '',
        oldPassword: '',
        newPassword: '',
      });
    }
  }, [user]);

  const handlePickImage = () => {
    launchImageLibrary({mediaType: 'photo', includeBase64: false}, response => {
      if (response.didCancel) {
      } else if (response.errorCode) {
        setAlertVisible(true);
        setAlertStpe('error');
        setAlerttite('L·ªói');
        setAlertMessage('Kh√¥ng th·ªÉ ch·ªçn ·∫£nh');
      } else if (response.assets && response.assets[0]) {
        setForm({...form, avatar: response.assets[0].uri ?? ''});
      }
    });
  };

  const handleSave = async () => {
    try {
      if (!user?.id) return;

      if (!form.username.trim() || !form.address.trim() || !form.phome.trim()) {
        setAlertVisible(true);
        setAlertStpe('error');
        setAlerttite('L·ªói');
        setAlertMessage(
          'T√™n ƒëƒÉng nh·∫≠p, ƒë·ªãa ch·ªâ v√† s·ªë ƒëi·ªán tho·∫°i kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng',
        );
        return;
      }

      const phoneRegex = /^0\d{9}$/;
      if (!phoneRegex.test(form.phome)) {
        setAlertVisible(true);
        setAlertStpe('error');
        setAlerttite('L·ªói');
        setAlertMessage(
          'S·ªë ƒëi·ªán tho·∫°i ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng s·ªë 0 v√† c√≥ ƒë√∫ng 10 ch·ªØ s·ªë',
        );
        return;
      }

      if (form.oldPassword !== '') {
        if (form.oldPassword !== user.password) {
          setAlertVisible(true);
          setAlertStpe('error');
          setAlerttite('L·ªói');
          setAlertMessage('M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng');
          return;
        }
        if (
          form.newPassword.trim().length > 0 &&
          form.newPassword.trim().length < 6
        ) {
          setAlertVisible(true);
          setAlertStpe('error');
          setAlerttite('L·ªói');
          setAlertMessage('M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±.');
          return;
        }
      } else if (form.newPassword.trim() !== '') {
        setAlertVisible(true);
        setAlertStpe('error');
        setAlerttite('L·ªói');
        setAlertMessage('Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u c≈© ƒë·ªÉ ƒë·ªïi m·∫≠t kh·∫©u m·ªõi.');
        return;
      }

      const newPassword =
        form.newPassword.trim() !== '' ? form.newPassword : user.password;

      const updatedUser = {
        id: user.id,
        username: form.username,
        password: newPassword,
        email: user.email,
        avatar: form.avatar,
        address: form.address,
        phome: form.phome,
      };

      await updateUser(updatedUser);
      await AsyncStorage.setItem('user', JSON.stringify(updatedUser));
      onUserUpdate(updatedUser);

      setAlertVisible(true);
      setAlertStpe('success');
      setAlerttite('Th√†nh C√¥ng');
      setAlertMessage('ƒê√£ c·∫≠p nh·∫≠t t√†i kho·∫£n');
      setForm(prevForm => ({...prevForm, oldPassword: '', newPassword: ''}));
    } catch (err) {
      console.error('üî¥ Update user error:', err);
      setAlertVisible(true);
      setAlertStpe('error');
      setAlerttite('L·ªói');
      setAlertMessage('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t t√†i kho·∫£n');
    }
  };

  // Th√¥ng b√°o (GI·ªÆ NGUY√äN LOGIC C·ª¶A B·∫†N)
  const [alertVisible, setAlertVisible] = useState(false);
  const [alertMessage, setAlertMessage] = useState('');
  const [alerttite, setAlerttite] = useState('');
  const [alertStpe, setAlertStpe] = useState<'success' | 'error' | 'info'>(
    'info',
  );

  return (
    <SafeAreaView style={styles.safeArea}>
      <ScrollView contentContainerStyle={styles.scrollContainer}>
        <View style={styles.accountCard}>
          <View style={styles.avatarContainer}>
            <TouchableOpacity
              onPress={handlePickImage}
              style={styles.avatarTouchable}>
              <Image
                source={{uri: form.avatar}}
                style={styles.avatar}
                onError={e => {
                  console.log('Error loading avatar:', e.nativeEvent.error);
                  setForm(prevForm => ({
                    ...prevForm,
                    avatar: 'https://via.placeholder.com/120?text=L·ªói+·∫¢nh',
                  }));
                }}
              />
              <Text style={styles.changeAvatarText}>Ch·ªçn ·∫£nh m·ªõi</Text>
            </TouchableOpacity>
          </View>

          <View style={styles.inputRow}>
            <Text style={styles.inputLabel}>T√™n ƒëƒÉng nh·∫≠p:</Text>
            <TextInput
              style={styles.input}
              value={form.username}
              onChangeText={text => setForm({...form, username: text})}
              placeholder="Nh·∫≠p t√™n ƒëƒÉng nh·∫≠p"
              placeholderTextColor={styles.placeholderText.color}
            />
          </View>

          <View style={styles.inputRow}>
            <Text style={styles.inputLabel}>Email:</Text>
            <TextInput
              style={[styles.input, styles.disabledInput]}
              value={form.email}
              editable={false}
              placeholderTextColor={styles.placeholderText.color}
            />
          </View>

          <View style={styles.inputRow}>
            <Text style={styles.inputLabel}>ƒê·ªãa ch·ªâ:</Text>
            <TextInput
              style={styles.input}
              value={form.address}
              onChangeText={text => setForm({...form, address: text})}
              placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ"
              placeholderTextColor={styles.placeholderText.color}
            />
          </View>

          <View style={styles.inputRow}>
            <Text style={styles.inputLabel}>S·ªë ƒëi·ªán tho·∫°i:</Text>
            <TextInput
              style={styles.input}
              value={form.phome}
              onChangeText={text => setForm({...form, phome: text})}
              keyboardType="phone-pad"
              placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
              placeholderTextColor={styles.placeholderText.color}
            />
          </View>

          <View style={styles.passwordSection}>
            <Text style={styles.sectionTitle}>ƒê·ªïi m·∫≠t kh·∫©u</Text>
            <View style={styles.inputRow}>
              <Text style={styles.inputLabel}>M·∫≠t kh·∫©u c≈©:</Text>
              <TextInput
                style={styles.input}
                placeholder="M·∫≠t kh·∫©u c≈©"
                secureTextEntry
                value={form.oldPassword}
                onChangeText={text => setForm({...form, oldPassword: text})}
                placeholderTextColor={styles.placeholderText.color}
              />
            </View>
            <View style={styles.inputRow}>
              <Text style={styles.inputLabel}>M·∫≠t kh·∫©u m·ªõi:</Text>
              <TextInput
                style={styles.input}
                placeholder="M·∫≠t kh·∫©u m·ªõi (ƒë·ªÉ tr·ªëng n·∫øu kh√¥ng ƒë·ªïi)"
                secureTextEntry
                value={form.newPassword}
                onChangeText={text => setForm({...form, newPassword: text})}
                placeholderTextColor={styles.placeholderText.color}
              />
            </View>
          </View>

          <TouchableOpacity onPress={handleSave} style={styles.saveChangesBtn}>
            <Text style={styles.saveChangesBtnText}>‚úîÔ∏è L∆∞u thay ƒë·ªïi</Text>
          </TouchableOpacity>
        </View>
      </ScrollView>

      <AutoDismissAlert
        visible={alertVisible}
        title={alerttite}
        message={alertMessage}
        type={alertStpe}
        onClose={() => setAlertVisible(false)}
      />
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  // ƒê·ªãnh nghƒ©a m√†u s·∫Øc theo h∆∞·ªõng d·∫´n
  // COLOR_BRIGHT_GREEN: '#00C853', // Xanh l√° c√¢y t∆∞∆°i s√°ng
  // COLOR_WHITE: '#FFFFFF', // Tr·∫Øng
  // COLOR_DARK_GRAY: '#2C3E50', // X√°m ƒë·∫≠m, g·∫ßn ƒëen
  // COLOR_LIGHT_GRAY: '#F0F2F5', // X√°m nh·∫°t
  // COLOR_RED_DELETE: '#E74C3C', // M√†u ƒë·ªè cho ƒëƒÉng xu·∫•t
  // COLOR_MEDIUM_GRAY: '#7F8C8D', // X√°m trung t√≠nh

  safeArea: {
    flex: 1,
    backgroundColor: '#F0F2F5', // N·ªÅn t·ªïng th·ªÉ x√°m nh·∫°t ƒë·ªÉ card n·ªïi b·∫≠t
  },
  scrollContainer: {
    flexGrow: 1,
    padding: 15,
    backgroundColor: '#F0F2F5',
  },
  header: {
    backgroundColor: '#00C853', // M√†u xanh l√° c√¢y ch√≠nh
    paddingVertical: 15,
    paddingHorizontal: 20,
    borderBottomLeftRadius: 15,
    borderBottomRightRadius: 15,
    marginBottom: 20,
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: {width: 0, height: 4},
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 6,
  },
  headerTitle: {
    fontSize: 22,
    fontWeight: '700',
    color: '#FFFFFF', // Ch·ªØ tr·∫Øng
  },
  accountCard: {
    backgroundColor: '#FFFFFF', // N·ªÅn tr·∫Øng cho card
    borderRadius: 15,
    paddingVertical: 20,
    paddingHorizontal: 15,
    shadowColor: '#000',
    shadowOffset: {width: 0, height: 2},
    shadowOpacity: 0.08,
    shadowRadius: 6,
    elevation: 3,
  },
  avatarContainer: {
    alignItems: 'center',
    marginBottom: 25,
  },
  avatarTouchable: {
    alignItems: 'center',
  },
  avatar: {
    width: 120,
    height: 120,
    borderRadius: 60,
    borderWidth: 3,
    borderColor: '#00C853', // M√†u border xanh l√° c√¢y
    marginBottom: 10,
    resizeMode: 'cover',
  },
  changeAvatarText: {
    color: '#008060', // Xanh l√° c√¢y ƒë·∫≠m h∆°n
    fontSize: 14,
    fontWeight: '600',
    textDecorationLine: 'underline',
  },
  inputRow: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 15,
    paddingBottom: 10,
    borderBottomWidth: 1,
    borderBottomColor: '#F0F2F5', // ƒê∆∞·ªùng ph√¢n c√°ch nh·∫°t
  },
  inputLabel: {
    width: 120, // Chi·ªÅu r·ªông c·ªë ƒë·ªãnh cho nh√£n
    fontSize: 15,
    fontWeight: '600',
    color: '#2C3E50', // X√°m ƒë·∫≠m
  },
  input: {
    flex: 1,
    fontSize: 15,
    color: '#2C3E50',
    paddingVertical: 5, // T·ªëi ∆∞u padding
  },
  disabledInput: {
    color: '#7F8C8D', // M√†u x√°m cho input kh√¥ng ch·ªânh s·ª≠a ƒë∆∞·ª£c
    backgroundColor: '#F9F9F9', // N·ªÅn h∆°i kh√°c cho input b·ªã disable
    borderRadius: 5,
    paddingHorizontal: 8,
  },
  placeholderText: {
    color: '#A0A0A0', // M√†u x√°m cho placeholder
  },
  passwordSection: {
    marginTop: 20,
    marginBottom: 15,
    paddingTop: 15,
    borderTopWidth: 1,
    borderTopColor: '#F0F2F5', // ƒê∆∞·ªùng ph√¢n c√°ch tr√™n ph·∫ßn ƒë·ªïi m·∫≠t kh·∫©u
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: '700',
    color: '#008060', // Ti√™u ƒë·ªÅ ph·∫ßn ƒë·ªïi m·∫≠t kh·∫©u
    marginBottom: 15,
    textAlign: 'center',
  },
  saveChangesBtn: {
    backgroundColor: '#00C853', // N√∫t l∆∞u m√†u xanh l√° c√¢y t∆∞∆°i s√°ng
    paddingVertical: 15,
    borderRadius: 10,
    alignItems: 'center',
    marginTop: 20,
    shadowColor: '#000',
    shadowOffset: {width: 0, height: 2},
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  saveChangesBtnText: {
    color: '#FFFFFF',
    fontSize: 18,
    fontWeight: '700',
    // ƒê·∫£m b·∫£o icon Unicode hi·ªÉn th·ªã ƒë√∫ng tr√™n c√°c n·ªÅn t·∫£ng
    ...Platform.select({
      android: {
        lineHeight: 25, // Adjust for better vertical alignment of unicode characters on Android
      },
    }),
  },
});

export default Account;
